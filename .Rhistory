head(rankall("heart attack", 20), 10)
source('~/.active-rstudio-document')
source('~/R_code_Coursera/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/R_code_Coursera/rankall.R')
source('~/R_code_Coursera/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submitscript3.R
source("submitscript3.R")
rm(list = ls())
source("submitscript3.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
rm(list = ls())
library(swril)
library(swirl)
swirl()
ls
list = ls()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(palnts)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
2
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,replace  = TRUE)
flaips <- sample(c(0,1),100,replace  = TRUE, probs = c(0.3,0.7))
flaips <- sample(c(0,1),100,replace  = TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1),100,replace  = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean = 100,sd = 25)
?rpois
rpois(5,1)
rpois(5,10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colmeans()
cm <- colMeans()
cm <- colMeans(my_pois)
hst(cm)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
calss(t4)
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist,xlab = "Speed")
plot(x = cars$speed, y = cars$dist,xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist,xlab = "Speed", ylab = "Stopping Distance")
plot(cars,main = "My Plot")
plot(cars,sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data  = mtcars)
hist(mtcars$mpg)
setwd("~/R_code_Coursera")
library(kernlab)
install.packages("kernlab")
rm(list= ls())
library(kernlab)
data(spam)
# Perform the subsampling
set.seed(3435)
trainIndicator = rbinom(4601,size=1,prob=0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator==1,]
testSpam = spam[trainIndicator==0,]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
source('~/R_code_Coursera/Reproducible Code SPAM example.R')
source('~/.active-rstudio-document')
warnings()
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam[,1:4]+1)
)
plot(log10(trainSpam[,1:4]+1)))
plot(log10(trainSpam[,1:4]+1))
par(mar=c(0,0,0,0))
hCluster = hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[,1:55]+1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type)-1
costFunction = function(x,y) sum(x!=(y > 0.5))
cvError = rep(NA,55)
library(boot)
for(i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula,family="binomial",data=trainSpam)
cvError[i] = cv.glm(trainSpam,glmFit,costFunction,2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
predictionModel = glm(numType ~ charDollar,family="binomial",data=trainSpam)
predictionTest = predict(predictionModel,testSpam)
predictedSpam = rep("nonspam",dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] = "spam"
table(predictedSpam,testSpam$type)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
str(nle)
str(nlme)
ls()
?lattice
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
rm(list=ls())
library(datasets)
data(airquality)
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
g <- g + geo_point()
print(g)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
g <- g + geom_point()
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
rm(list=ls())
setwd("C:\\Users\\Pieter\\Documents\\RepData_PeerAssessment1")
datafile <- ".\\activity.csv"
data <- read.csv(datafile, header=TRUE, sep=',', na.strings="NA",
,colClasses = c("character","character","numeric"), stringsAsFactors=FALSE)
str(data)
summary(data)
tail(data)
head(data)
str(data)
data$date <- as.Date(data$date, format="%d/%m/%Y")
str(data)
head(data)
datafile <- ".\\activity.csv"
data <- read.csv(datafile, header=TRUE, sep=',', na.strings="NA",
,colClasses = c("character","character","numeric"), stringsAsFactors=FALSE)
data$date <- as.Date(data$date, format="%Y/%m/%d")
str(data)
head(data)
datafile <- ".\\activity.csv"
data <- read.csv(datafile, header=TRUE, sep=',', na.strings="NA",
,colClasses = c("character","character","numeric"), stringsAsFactors=FALSE)
data$date <- as.Date(data$date, format="%Y-%m-%d")
head(data)
str(data)
data
str(data)
datafile <- ".\\activity.csv"
data <- read.csv(datafile, header=TRUE, sep=',', na.strings="NA",
,colClasses = c("numeric","character","numeric"), stringsAsFactors=FALSE)
data$date <- as.Date(data$date, format="%Y-%m-%d")
str(data)
tail(data)
data(!is.na(data($steps)))
data(!is.na(data$steps))
!is.na(data$steps)
data(!is.na(data$steps))
x <- !is.na(data$steps)
data(x)
str(x)
data.x
data?x
data*x
data[!is.na(data$steps)]
data(na.rm = true)
data(na.rm == true)
datafile <- ".\\activity.csv"
data <- read.csv(datafile, header=TRUE, na.strings="NA",
,colClasses = c("numeric","character","numeric"), stringsAsFactors=FALSE)
data$date <- as.Date(data$date, format="%Y-%m-%d")
str(data)
hist(data.date$steps,
breaks=20,
col = "blue",
main = "Histogram of Total Number of Steps Taken per Day",
xlab = "Steps per Day")
steps.date <- aggregate(steps ~ date, data=activity, FUN=sum)
data.date <- aggregate(data$steps,by=data$date,FUN=sum,na.rm=TRUE)
hist(data.date$steps,
breaks=20,
col = "blue",
main = "Histogram of Total Number of Steps Taken per Day",
xlab = "Steps per Day")
data.date <- aggregate(data[1],by=data[2],FUN=sum,na.rm=TRUE)
hist(data.date$steps,
breaks=20,
col = "blue",
main = "Histogram of Total Number of Steps Taken per Day",
xlab = "Steps per Day")
mean(data.date$steps)
round(mean(data.date$steps),0)
#Mean Total Number of Steps taken each Day (ignoring missing values)
round(mean(data.date$steps),0)
#median Total Number of Steps taken each Day (ignoring missing values)
round(mean(data.date$steps),0)
#Mean Total Number of Steps taken each Day (ignoring missing values)
round(mean(data.date$steps),0)
#median Total Number of Steps taken each Day (ignoring missing values)
round(median(data.date$steps),0)
data.interval <- aggregate(data[1],by=data[3],FUN=mean,na.rm=TRUE)
plot(x=data.interval$interval,
y=data.interval$steps,
type="l",
main="Average Steps Per 5-Minute Interval",
xlab="Interval",
ylab="Number of Steps")
data.interval
data.interval$interval[which.max(data.interval$steps)]
sum(is.na(data))
x<- data
x[x$steps==na]
x[is.na(x$steps)]
x[is.na(x$steps),]
x[is.na(x$steps),c(88,x$date,x$interval]
x[is.na(x$steps),c(88,x$date,x$interval)]
class(data)
x[is.na(x$steps)]
x[x$steps==na]
x[x$steps==na]
x[x$steps==na,]
x[x$steps=na,]
x[is.na(x$steps),]
y <- data.frame( round(mean(data.date$steps),0)    , x[is.na(x$steps),][2],x[is.na(x$steps),][3])
y
data.interval
x
x[is.na(x$steps),]
x[is.na(x$steps),]$steps
data.interval
str(data.interval)
x[is.na(x$steps),]$steps <- data.interval[is.na(x$steps)]$steps
na <-is.na(x$steps)
str(na)
class(na)
nadata <- is.na(data$steps)
data$steps[nadata]
data.interval$steps[nadata]
?merge
z <- merge(data, data.interval, all = TRUE, by = c("interval"), suffixes = c("",".y"))
str(z)
data <- merge(data, steps.interval, by="interval", suffixes=c("",".y"))
nadata <- is.na(data)
data[nadata] <- data.y[nadata]
data <- data[,c(1:3)]
data <- merge(data, data.interval, by="interval", suffixes=c("",".y"))
nadata <- is.na(data)
data[nadata] <- data.y[nadata]
data <- data[,c(1:3)]
data <- merge(data, data.interval, by="interval", suffixes=c("",".y"))
nadata <- is.na(data)
data[nadata]$steps <- data[nadata]$steps.y
data <- data[,c(1:3)]
data <- merge(data, data.interval, by="interval", suffixes=c("",".y"))
nadata <- is.na(data)
str(data)
data <- merge(data, data.interval, by="interval", suffixes=c("","y"))
nadata <- is.na(data)
data[nadata]$steps <- data[nadata]$steps.y
data <- data[,c(1:3)]
data[nadata]$steps <- data[nadata]$stepsy
data.interval <- aggregate(data[1],by=data[3],FUN=mean,na.rm=TRUE)
plot(x=data.interval$interval,
y=data.interval$steps,
type="l",
main="Average Steps Per 5-Minute Interval",
xlab="Interval",
ylab="Number of Steps")
nadata <- is.na(data$steps)
data <- merge(data, data.interval, by="interval", suffixes=c("","y"))
nadata <- is.na(data)
data
datafile <- ".\\activity.csv"
data <- read.csv(datafile, header=TRUE, na.strings="NA",
,colClasses = c("numeric","character","numeric"), stringsAsFactors=FALSE)
data$date <- as.Date(data$date, format="%Y-%m-%d")
## What is mean total number of steps taken per day?
#Histogram to display Total Number of Steps taken each Day
data.date <- aggregate(data[1],by=data[2],FUN=sum,na.rm=TRUE)
hist(data.date$steps,
breaks=20,col = "yellow",
main = "Histogram of Total Number of Steps Taken each Day",
xlab = "Steps per Day")
#Mean Total Number of Steps taken each Day (ignoring missing values)
round(mean(data.date$steps),0)
#median Total Number of Steps taken each Day (ignoring missing values)
round(median(data.date$steps),0)
## What is the average daily activity pattern?
#1.Time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
data.interval <- aggregate(data[1],by=data[3],FUN=mean,na.rm=TRUE)
plot(x=data.interval$interval,
y=data.interval$steps,
type="l",
main="Average Steps Per 5-Minute Interval",
xlab="Interval",
ylab="Number of Steps")
#2. Which 5-minute interval, on average across all the days in the dataset,contains the maximum number of steps?
data.interval$interval[which.max(data.interval$steps)]
## Imputing missing values
#1.Calculate and report the total number of missing values in the dataset
sum(is.na(data))
nadata <- is.na(data$steps)
data <- merge(data, data.interval, by="interval", suffixes=c("","y"))
nadata <- is.na(data$steps)
str(data)
data[nadata]$steps <- data$stepsy[nadata]
require(dplyr)
data <- data %>%
mutate(steps = ifelse(is.na(steps),stepsy,steps))
str(data)
require(dplyr)
data <- merge(data, data.interval, by="interval", suffixes=c("","_mean"))
data <- data %>% mutate(steps = ifelse(is.na(steps),steps_mean,steps))
data <- data[,c(1:3)]
str(data)
data <- data[,c("steps","date","interval")]
str(data)
suppressMessages(require(dplyr))
suppressMessages(require(dplyr))
data <- merge(data, data.interval, by="interval", suffixes=c("","_mean"))
data <- data %>% mutate(steps = ifelse(is.na(steps),steps_mean,steps))
data <- data[,c("steps","date","interval")]
str(data)
suppressMessages(require(dplyr))
datatidy <- merge(data, data.interval, by="interval", suffixes=c("","_mean"))
datatidy <- datatidy %>% mutate(steps = ifelse(is.na(steps),steps_mean,steps))
datatidy <- datatidy[,c("steps","date","interval")]
datatidy.date <- aggregate(datatidy[1],by=datatidy[2],FUN=sum,na.rm=TRUE)
hist(datatidy.date$steps,
breaks=20,col = "yellow",
main = "Histogram of Total Number of Steps Taken each Day",
xlab = "Steps per Day")
#5. Mean Total Number of Steps taken each Day (ignoring missing values)
round(mean(datatidy.date$steps),0)
#6. Median Total Number of Steps taken each Day (ignoring missing values)
round(median(datatidy.date$steps),0)
xyplot(steps ~ sInterval, data=meanStepsPerInterval, type="l", grid=TRUE, ylab="Number of steps", xlab="5-min. intervals from midnight", main="Average number of steps by 5-minutes intervals")
datatidy.date <- aggregate(datatidy[1],by=datatidy[2],FUN=sum,na.rm=TRUE)
hist(datatidy.date$steps,
breaks=100,col = "yellow",
main = "Histogram of Total Number of Steps Taken each Day",
xlab = "Steps per Day")
datatidy.date <- aggregate(datatidy[1],by=datatidy[2],FUN=sum,na.rm=TRUE)
hist(datatidy.date$steps,
breaks=10,col = "yellow",
main = "Histogram of Total Number of Steps Taken each Day",
xlab = "Steps per Day")
data.date <- aggregate(data[1],by=data[2],FUN=sum,na.rm=TRUE)
hist(data.date$steps,
breaks=10,col = "yellow",
main = "Histogram of Total Number of Steps Taken each Day",
xlab = "Steps per Day")
data.date <- aggregate(data[1],by=data[2],FUN=sum,na.rm=TRUE)
hist(data.date$steps,
breaks=10,col = "yellow",
main = "Histogram of Total Number of Steps Taken each Day",
xlab = "Steps per Day")
datatidy.date <- aggregate(datatidy[1],by=datatidy[2],FUN=sum,na.rm=TRUE)
hist(datatidy.date$steps,
breaks=10,col = "yellow",
main = "Histogram of Total Number of Steps Taken each Day",
xlab = "Steps per Day")
data.date <- aggregate(data[1],by=data[2],FUN=sum,na.rm=TRUE)
hist(data.date$steps,
breaks=20,col = "yellow",
main = "Histogram of Total Number of Steps Taken each Day",
xlab = "Steps per Day")
datatidy.date <- aggregate(datatidy[1],by=datatidy[2],FUN=sum,na.rm=TRUE)
hist(datatidy.date$steps,
breaks=20,col = "yellow",
main = "Histogram of Total Number of Steps Taken each Day",
xlab = "Steps per Day")
datatidy.date <- aggregate(datatidy[1],by=datatidy[2],FUN=sum,na.rm=TRUE)
hist(datatidy.date$steps,
breaks=20,col = "yellow",
main = "Histogram of Total Number of Steps Taken each Day",
xlab = "Steps per Day")
datafile <- ".\\activity.csv"
data <- read.csv(datafile, header=TRUE, na.strings="NA",
,colClasses = c("numeric","character","numeric"), stringsAsFactors=FALSE)
data$date <- as.Date(data$date, format="%Y-%m-%d")
## What is mean total number of steps taken per day?
#1. Histogram to display Total Number of Steps taken each Day
data.date <- aggregate(data[1],by=data[2],FUN=sum,na.rm=TRUE)
hist(data.date$steps,
breaks=20,col = "yellow",
main = "Histogram of Total Number of Steps Taken each Day",
xlab = "Steps per Day")
#2. Mean Total Number of Steps taken each Day (ignoring missing values)
round(mean(data.date$steps),0)
# Median Total Number of Steps taken each Day (ignoring missing values)
round(median(data.date$steps),0)
## What is the average daily activity pattern?
#1.Time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
data.interval <- aggregate(data[1],by=data[3],FUN=mean,na.rm=TRUE)
plot(x=data.interval$interval,
y=data.interval$steps,
type="l",
main="Average Steps Per 5-Minute Interval",
xlab="Interval",
ylab="Nmber of Steps")
#2. Which 5-minute interval, on average across all the days in the dataset,contains the maximum number of steps?
data.interval$interval[which.max(data.interval$steps)]
## Imputing missing values
#1.Calculate and report the total number of missing values in the dataset
sum(is.na(data))
#2. Fill in all of the missing values in the dataset
#Replace missing step values with the mean steps for the interval (as calculated in "data.interval")
#3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
suppressMessages(require(dplyr))
datatidy <- merge(data, data.interval, by="interval", suffixes=c("","_mean"))
datatidy <- datatidy %>% mutate(steps = ifelse(is.na(steps),steps_mean,steps))
datatidy <- datatidy[,c("steps","date","interval")]
#4. Histogram to display Total Number of Steps taken each Day
datatidy.date <- aggregate(datatidy[1],by=datatidy[2],FUN=sum,na.rm=TRUE)
hist(datatidy.date$steps,
breaks=20,col = "yellow",
main = "Histogram of Total Number of Steps Taken each Day",
xlab = "Steps per Day")
#5. Mean Total Number of Steps taken each Day (ignoring missing values)
round(mean(datatidy.date$steps),0)
#6. Median Total Number of Steps taken each Day (ignoring missing values)
round(median(datatidy.date$steps),0)
